import geometry = require("utils/geometry");
import view = require("ui/core/view");
export declare class LayoutInfo {
    private _minSize;
    private _size;
    private _maxSize;
    private _view;
    private _isInUpdateLayout;
    public desiredSize: geometry.Size;
    public renderSize: geometry.Size;
    public _margin: geometry.Thickness;
    private _horizontalAlignment;
    private _verticalAlignment;
    public needsClipBounds: boolean;
    public unclippedDesiredSize: geometry.Size;
    public visualOffset: geometry.Point;
    public isLayoutSuspended: boolean;
    public neverMeasured: boolean;
    public measureDirty: boolean;
    public neverArranged: boolean;
    public arrangeDirty: boolean;
    public measureInProgress: boolean;
    public arrangeInProgress: boolean;
    public previousAvailableSize: geometry.Size;
    public finalRect: geometry.Rect;
    public measureRequest: Request;
    public arrangeRequest: Request;
    public treeLevel: number;
    constructor(view: view.View);
    static isMaxWidthHeightValid(value: number): boolean;
    static isMinWidthHeightValid(value: number): boolean;
    static isWidthHeightValid(value: number): boolean;
    public view : view.View;
    public parent : view.View;
    public width : number;
    public height : number;
    public maxWidth : number;
    public maxHeight : number;
    public minHeight : number;
    public minWidth : number;
    public setMinSize(minWidth: number, minHeight: number): void;
    public setMaxSize(maxWidth: number, maxHeight: number): void;
    public setSize(width: number, height: number): void;
    public isMeasureValid : boolean;
    public isArrangeValid : boolean;
    public horizontalAlignment : number;
    public verticalAlignment : number;
    public margin : geometry.Thickness;
    public isVisible : boolean;
    public nativeView : UIView;
    public invalidateMeasure(): void;
    public invalidateMeasureInternal(): void;
    public invalidateArrange(): void;
    public invalidateArrangeInternal(): void;
    public measure(availableSize: geometry.Size): void;
    public measureCore(availableSize: geometry.Size): geometry.Size;
    public notifyDesiredSizeChanged(): void;
    public isRenderable(): boolean;
    public arrange(finalRect: geometry.Rect): void;
    public arrangeCore(finalRect: geometry.Rect): void;
    public computeAlignmentOffset(clientSize: geometry.Size, renderSize: geometry.Size): geometry.Point;
    public updateLayout(): void;
    static propagateResumeLayout(parent: LayoutInfo, layout: LayoutInfo): void;
    static propagateSuspendLayout(layout: LayoutInfo): void;
}
export declare class Request {
    public next: Request;
    public prev: Request;
    public target: LayoutInfo;
}

import definition = require("ui/core/view");
import proxy = require("ui/core/proxy");
import style = require("ui/core/style/style");
import geometry = require("utils/geometry");
import dependencyObservable = require("ui/core/dependency-observable");
import gestures = require("ui/gestures");
export declare function getViewById(view: View, id: string): View;
export declare function eachDescendant(view: definition.View, callback: (child: View) => boolean): void;
export declare function getAncestor(view: View, typeName: string): definition.View;
export declare module knownEvents {
    var loaded: string;
    var unloaded: string;
}
export declare var isVisibleProperty: dependencyObservable.Property;
export declare class View extends proxy.ProxyObject implements definition.View {
    private _parent;
    private _layoutInfo;
    private _style;
    private _id;
    private _cssClass;
    private _visualState;
    private _requestedVisualState;
    private _isLoaded;
    private _layoutBounds;
    public _domId: number;
    public _isAddedToNativeVisualTree: boolean;
    private _gesturesObserver;
    constructor();
    public observe(type: number, callback: (args: gestures.GestureEventData) => void): gestures.GesturesObserver;
    public toString(): string;
    public width : number;
    public height : number;
    public maxWidth : number;
    public maxHeight : number;
    public minHeight : number;
    public minWidth : number;
    public horizontalAlignment : number;
    public verticalAlignment : number;
    public margin : geometry.Thickness;
    public isVisible : boolean;
    public style : style.Style;
    public cssClass : string;
    public visualState : string;
    public id : string;
    public cssType : string;
    public parent : definition.View;
    public isLoaded : boolean;
    public measure(availableSize: geometry.Size, options?: any): geometry.Size;
    public arrange(finalRect: geometry.Rect, options?: any): void;
    public onLoaded(): void;
    public onUnloaded(): void;
    public _onPropertyChanged(property: dependencyObservable.Property, oldValue: any, newValue: any): void;
    public _onBindingContextChanged(): void;
    public _invalidateMeasure(): void;
    public _invalidateArrange(): void;
    public _measureOverride(availableSize: geometry.Size, options?: any): geometry.Size;
    public _arrangeOverride(finalSize: geometry.Size): void;
    public _measureNativeView(availableSize: geometry.Size, options?: any): geometry.Size;
    public _setBounds(rect: geometry.Rect): void;
    public _getBounds(): geometry.Rect;
    public _context: android.content.Context;
    public _onAttached(context: android.content.Context): void;
    public _onDetached(force?: boolean): void;
    public _createUI(): void;
    public _onContextChanged(): void;
    public _getMeasureSpec(length: number): number;
    public _childrenCount : number;
    public _eachChildView(callback: (view: View) => boolean): void;
    public _addView(view: View): void;
    public _addViewCore(view: View): void;
    public _removeView(view: View): void;
    public _removeViewCore(view: View): void;
    public _addViewToNativeVisualTree(view: View): boolean;
    public _removeViewFromNativeVisualTree(view: View): void;
    public _syncNativeProperties(): void;
    public _goToVisualState(state: string): void;
    public _updateLayout(): void;
    public _nativeView : any;
}
